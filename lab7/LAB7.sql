CREATE FUNCTION NO_OF_EMP()
RETURNS INTEGER
AS
BEGIN
DECLARE @COUNT INTEGER
SELECT @COUNT = COUNT(*) FROM EMPLOYEES;
RETURN @COUNT;
END

SELECT DBO.NO_OF_EMP() AS 'NUMBER';

CREATE FUNCTION MAX_OF_TWO
(@X INTEGER, @Y INTEGER)
RETURNS INTEGER 
AS
BEGIN
DECLARE @Z NUMERIC(10);
	IF @X > @Y
		SET @Z = @X;
	ELSE
		SET @Z = @Y;
	
	RETURN @Z
END

DROP FUNCTION DBO.MAX_OF_TWO

SELECT DBO.MAX_OF_TWO(34, 45) AS 'MAX';

CREATE FUNCTION FACTORIAL
(@X INTEGER)
RETURNS INTEGER
AS

BEGIN

DECLARE @Z INTEGER;

IF @X = 1
	SET @Z = 1;

ELSE

	SET @Z = (@X) * DBO.FACTORIAL(@X - 1);

RETURN @Z;

END

SELECT DBO.FACTORIAL(5) AS 'FACT';


CREATE FUNCTION FACTORIAL_ITER
(@X INTEGER)
RETURNS INTEGER
AS
BEGIN
	DECLARE @Z INTEGER;

	SET @Z = 1;
	
	WHILE @X != 0
	BEGIN
		SET @Z = @Z * @X;
		SET @X = @X - 1;
	END

	RETURN @Z;


END

DROP FUNCTION DBO.FACTORIAL_ITER
SELECT DBO.FACTORIAL_ITER(5) AS 'FACT';

CREATE FUNCTION DETAILS
(@ID INTEGER)
RETURNS TABLE 
AS

RETURN SELECT P.PROJECTID, P.DEPTCODE, P.DESCRIPTION FROM 
PROJECTS P JOIN WORKSON W
ON P.PROJECTID = W.projectid JOIN
EMPLOYEES E ON
W.employeeid = E.employeeid
WHERE E.employeeid = @ID;

SELECT * FROM DBO.DETAILS(2);

CREATE FUNCTION DETAILS_2
(@ID INTEGER)
RETURNS @PROJECT1 TABLE
(PROJECTID CHAR(8) NOT NULL,
DEPTCODE CHAR(5),
DESCRIPTION VARCHAR(200)
)

AS

BEGIN

	INSERT INTO @PROJECT1
	SELECT PROJECTID, DEPTCODE, DESCRIPTION
	FROM PROJECTS
	WHERE PROJECTID IN (SELECT PROJECTID FROM WORKSON WHERE EMPLOYEEID = @ID);

 RETURN
 END

 SELECT * FROM DBO.DETAILS_2(2);
 

CREATE FUNCTION FIBBONACCI
(@X INTEGER)
RETURNS INTEGER
AS

BEGIN
	
	DECLARE @Z INTEGER;
	IF @X = 1 OR @X = 0
		SET @Z = @X;

	ELSE
	BEGIN
		SET @Z = DBO.FIBBONACCI(@X - 1) + DBO.FIBBONACCI(@X - 2);
	END

	RETURN @Z;
END
DROP FUNCTION FIBBONACCI;
SELECT DBO.FIBBONACCI(4) AS 'NUM';


CREATE FUNCTION FIB_ITER
(@X INTEGER)
RETURNS @FIB_TABLE TABLE
(N INTEGER)
AS

BEGIN
	DECLARE @Z INTEGER;
	DECLARE @COUNTER INTEGER;
	SET @COUNTER = 1;

	WHILE @COUNTER <= @X
	BEGIN
	SET @Z = DBO.FIBBONACCI(@COUNTER);
	INSERT INTO @FIB_TABLE
	VALUES(@Z);

	SET @COUNTER = @COUNTER + 1;
	END

RETURN
END

SELECT * FROM FIB_ITER(11);

--PROCEDURE

CREATE PROCEDURE FINDMIN(@X INTEGER, @Y INTEGER, @Z INTEGER OUTPUT)
AS BEGIN
	IF(@X < @Y)
	BEGIN
		SET @Z = @X
	END

	ELSE
	BEGIN
		SET @Z = @Y;
	END

END

DECLARE @X INTEGER, @A INTEGER, @B INTEGER;
BEGIN
	SET @A = 10;
	SET @B = 20;
	EXEC FINDMIN @A, @B, @X OUTPUT;
	PRINT 'THE MINIMUM IS ' + CAST(@X AS VARCHAR);
END

PRINT 'THE MINIMUM IS ' + CAST(@X AS VARCHAR);

CREATE PROCEDURE SQUARE_NUM(@IN INTEGER, @OUT INTEGER OUTPUT)
AS 
BEGIN
	SET @OUT = @IN * @IN;
	--PRINT 'SQUARE OF ' + CAST(@IN AS VARCHAR) + ' IS ' +
		--CAST(@OUT AS VARCHAR);
		 

END

DROP PROCEDURE SQUARE_NUM

DECLARE @X INTEGER, @Y INTEGER;
BEGIN
	SET @X = 10;
	EXEC SQUARE_NUM @X, @Y OUTPUT;
	PRINT @Y;
END

--cursor

DECLARE INFO_CURSOR CURSOR FOR
SELECT INGREDIENTID, NAME, UNIT FROM INGREDIENTS;
DECLARE @ID VARCHAR(20), @NAME VARCHAR(20), @UNIT VARCHAR(20);
OPEN INFO_CURSOR;
FETCH NEXT FROM INFO_CURSOR INTO @ID, @NAME, @UNIT;

WHILE @@FETCH_STATUS = 0
BEGIN
	
	IF @UNIT IS NOT NULL
	BEGIN
		
		PRINT (@ID + ' ' + @NAME + ' ' + @UNIT);
	END
	FETCH NEXT FROM INFO_CURSOR INTO @ID, @NAME, @UNIT; 

END

--questions

DECLARE EMP_INFO CURSOR FOR 
SELECT EMPLOYEEID, FIRSTNAME, lastname, DEPTCODE, salary FROM EMPLOYEES
WHERE LASTNAME LIKE '____WARE';

DECLARE @EMPLOYEEID VARCHAR(20), @FIRSTNAME VARCHAR(20),
@LASTNAME VARCHAR(20), @DEPTCODE VARCHAR(20), @SALARY INTEGER;

OPEN EMP_INFO;

FETCH NEXT FROM EMP_INFO INTO @EMPLOYEEID, @FIRSTNAME, @LASTNAME, @DEPTCODE, @SALARY;

WHILE @@FETCH_STATUS = 0

BEGIN
	
	PRINT @EMPLOYEEID + ' ' + @FIRSTNAME + ' ' + @LASTNAME + ' ' + @DEPTCODE + ' ' +
		CAST(@SALARY AS VARCHAR);
	FETCH NEXT FROM EMP_INFO INTO @EMPLOYEEID, @FIRSTNAME, @LASTNAME, @DEPTCODE, @SALARY;



END

--3

DECLARE C_NAME CURSOR FOR 
SELECT FIRSTNAME + ' ' + LASTNAME AS NAME FROM EMPLOYEES 
WHERE DEPTCODE = 


CLOSE EMP_INFO;
DEALLOCATE EMP_INFO;

SELECT * FROM PROJECTS


--2

DECLARE EMPLOYEE_CUR CURSOR FOR
SELECT EMPLOYEEID, LASTNAME, DEPTCODE, SALARY FROM EMPLOYEES;

DECLARE @EMPLOYEEID VARCHAR(10), @LASTNAME VARCHAR(20), @DEPTCODE VARCHAR(20),
	@SALARY INTEGER;

OPEN EMPLOYEE_CUR;

FETCH NEXT FROM EMPLOYEE_CUR INTO @EMPLOYEEID, @LASTNAME, @DEPTCODE, @SALARY;

WHILE @@FETCH_STATUS = 0
BEGIN
	IF @DEPTCODE LIKE 'ACCNT' AND @SALARY > 30000
	BEGIN
		PRINT @EMPLOYEEID + ' ' + @LASTNAME;
	END

	FETCH NEXT FROM EMPLOYEE_CUR INTO @EMPLOYEEID, @LASTNAME, @DEPTCODE, @SALARY;


END
CLOSE EMPLOYEE_CUR;
DEALLOCATE EMPLOYEE_CUR;

SELECT DEPTCODE, LASTNAME
FROM EMPLOYEES
WHERE DEPTCODE = 'ACCNT' AND SALARY > 30000

SELECT * FROM EMPLOYEES

--3

DECLARE C_3 CURSOR FOR
SELECT FIRSTNAME, LASTNAME
FROM EMPLOYEES
WHERE DEPTCODE IN (SELECT CODE FROM DEPARTMENTS 
WHERE NAME = 'CONSULTING') AND 
EMPLOYEEID IN (SELECT W.EMPLOYEEID FROM WORKSON W
JOIN PROJECTS P ON W.projectid = P.projectid
WHERE P.PROJECTID = 'ADT4MFIA' AND W.ASSIGNEDTIME/(SELECT SUM(W1.assignedtime) FROM WORKSON W1 WHERE W.EMPLOYEEID = W1.EMPLOYEEID GROUP BY W1.EMPLOYEEID) > 0.2);

OPEN C_3;
DECLARE @FIRSTNAME VARCHAR(20),
@LASTNAME VARCHAR(20);
FETCH NEXT FROM C_3 INTO @FIRSTNAME, @LASTNAME;

WHILE @@FETCH_STATUS = 0
BEGIN
	PRINT ISNULL(@FIRSTNAME, '') + ' ' + ISNULL(@LASTNAME, '');
	FETCH NEXT FROM C_3 INTO @FIRSTNAME, @LASTNAME;

END

CLOSE C_3;
DEALLOCATE C_3;
SELECT * FROM WORKSON

--4

DECLARE C_4 CURSOR FOR
SELECT FIRSTNAME, LASTNAME
FROM EMPLOYEES
WHERE SALARY > (SELECT MIN(SALARY) FROM EMPLOYEES WHERE DEPTCODE IN
(SELECT CODE FROM DEPARTMENTS WHERE NAME = 'ACCOUNTING'));

DECLARE 
@FIRSTNAME VARCHAR(20),
@LASTNAME VARCHAR(20)

OPEN C_4;

FETCH NEXT FROM C_4 INTO @FIRSTNAME, @LASTNAME;

WHILE @@FETCH_STATUS = 0
BEGIN
	PRINT @FIRSTNAME + ' ' + @LASTNAME;
	FETCH NEXT FROM C_4 INTO @FIRSTNAME, @LASTNAME;


END
CLOSE C_4;

CREATE TYPE BOOKS AS TABLE
(TITLE VARCHAR(50), AUTHOR VARCHAR(50), SUBJECT1 VARCHAR(100), BOOK_ID INTEGER);

BEGIN
DECLARE @BOOK1 DBO.BOOKS;
DECLARE @BOOK2 DBO.BOOKS;

INSERT INTO @BOOK1(TITLE, AUTHOR, SUBJECT1, BOOK_ID) VALUES
('T-SQL FOR DUMMIES', 'AYUSH', 'DATABASE SYSTEMS', 654321);

INSERT INTO @BOOK2(TITLE, AUTHOR, SUBJECT1, BOOK_ID) VALUES
('ADVANCED T-SQL', 'VDWDECE', 'DATABASE SYSTEMS', 123456);

SELECT * FROM @BOOK1;
SELECT * FROM @BOOK2;
END



DEALLOCATE C_4;


















