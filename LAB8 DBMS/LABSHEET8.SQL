CREATE TRIGGER MSRKUP ON INGREDIENTS
AFTER UPDATE AS
UPDATE ITEMS SET PRICE = (SELECT 2 * SUM(QUANTITY * UNITPRICE)
FROM MADEWITH M, INGREDIENTS I
WHERE M.INGREDIENTID = I.INGREDIENTID AND ITEMS.ITEMID = M.ITEMID);

CREATE VIEW ALEX AS
SELECT EMPLOYEEID, FIRSTNAME,LASTNAME,SALARY,CODE
FROM EMPLOYEES INNER JOIN DEPARTMENTS
ON EMPLOYEES.DEPTCODE = DEPARTMENTS.CODE;

drop view alex

CREATE TABLE STUDENT_INFO(
	FIRST_NAME VARCHAR(20),
	LAST_NAME VARCHAR(20),
	ID VARCHAR(20),
	AGE NUMERIC(2)
	);


--EXERCISE INDEXING
CREATE UNIQUE INDEX I_FIRST_NAME ON STUDENT_INFO(FIRST_NAME DESC);


CREATE INDEX I_FIRST_LAST_NAME ON STUDENT_INFO(FIRST_NAME ASC, LAST_NAME ASC);

CREATE UNIQUE CLUSTERED INDEX I_AGE ON STUDENT_INFO(AGE, ?);

CREATE NONCLUSTERED INDEX I_ID_AGE ON STUDENT_INFO(ID, AGE);

ALTER TABLE DBO.STUDENT_INFO ADD UPPER_NAME AS UPPER(FIRST_NAME + ' 
' + LAST_NAME);
SELECT * FROM STUDENT_INFO;
CREATE UNIQUE NONCLUSTERED INDEX I_FUNC_NAME ON STUDENT_INFO(UPPER_NAME);


--EXERCISE FOR TRIGGERS
CREATE TRIGGER CAPITAL ON EMPLOYEES
AFTER UPDATE, insert AS
UPDATE EMPLOYEES 
set FIRSTNAME = LOWER(FIRSTNAME),
LASTNAME = LOWER(LASTNAME);

INSERT INTO EMPLOYEES VALUES(7,'JD','TRR','ACCNT',1000);

SELECT * FROM EMPLOYEES

DROP TRIGGER CAPITAL;

DELETE FROM EMPLOYEES
WHERE EMPLOYEEID = 15 OR EMPLOYEEID = 17;

--2

CREATE TRIGGER T_RESTORE ON EMPLOYEES
AFTER UPDATE AS
UPDATE Employees
SET Employees.FIRSTNAME = DELETED.FIRSTNAME,
EMPLOYEES.LASTNAME = DELETED.LASTNAME,
EMPLOYEES.DEPTCODE = DELETED.DEPTCODE,
EMPLOYEES.SALARY = DELETED.SALARY
FROM EMPLOYEES INNER JOIN DELETED ON EMPLOYEES.EMPLOYEEID = DELETED.EMPLOYEEID
WHERE DELETED.SALARY > 10000;

DROP TRIGGER T_RESTORE;



UPDATE EMPLOYEES
SET FIRSTNAME = UPPER(FIRSTNAME + 'T');

SELECT * FROM EMPLOYEES

--3

CREATE VIEW ALEX AS 
SELECT EMPLOYEEID, FIRSTNAME, LASTNAME, SALARY, CODE
FROM EMPLOYEES INNER JOIN DEPARTMENTS
ON EMPLOYEES.DEPTCODE = DEPARTMENTS.CODE;

DROP VIEW ALEX

CREATE TRIGGER T_INSERT ON ALEX
INSTEAD OF INSERT AS
	BEGIN TRANSACTION TEMP;
	SAVE TRANSACTION CHECK_1;

	DECLARE
	@EMPLOYEEID NUMERIC(9),
	@FIRSTNAME VARCHAR(10),
	@LASTNAME VARCHAR(10),
	@SALARY NUMERIC(20),
	@CODE CHAR(5)

	SELECT @EMPLOYEEID = EMPLOYEEID FROM INSERTED
	SELECT @FIRSTNAME = FIRSTNAME FROM INSERTED
	SELECT @LASTNAME = LASTNAME FROM INSERTED
	SELECT @SALARY = SALARY FROM INSERTED
	SELECT @CODE = CODE FROM INSERTED

	--CHECK IF INPUT IS VALID

	IF
	(@EMPLOYEEID IN (SELECT EMPLOYEEID FROM EMPLOYEES) OR
	@CODE NOT IN (SELECT CODE FROM DEPARTMENTS))

	BEGIN RAISERROR('SOME ERROR IN INSERT', 16, 1);
	ROLLBACK TRANSACTION CHECK_1;
	END

	ELSE BEGIN
		INSERT INTO EMPLOYEES
		VALUES(@EMPLOYEEID, @FIRSTNAME, @LASTNAME, @CODE, @SALARY);
		COMMIT TRANSACTION TEMP;
		END

GO

--3

CREATE TRIGGER T_INSERT ON ALEX
INSTEAD OF UPDATE AS

	BEGIN TRANSACTION T1;

	SAVE TRANSACTION P1;
	
	DECLARE @EMPLOYEEID NUMERIC(9),
	@FIRSTNAME VARCHAR(10),
	@LASTNAME VARCHAR(10),
	@CODE CHAR(5),
	@SALARY NUMERIC(9, 2);

	SELECT @EMPLOYEEID = EMPLOYEEID FROM INSERTED;
	SELECT @FIRSTNAME = FIRSTNAME FROM INSERTED;
	SELECT @LASTNAME = LASTNAME FROM INSERTED;
	SELECT @CODE = CODE FROM INSERTED;
	SELECT @SALARY = SALARY FROM INSERTED;

	IF(@EMPLOYEEID IN (SELECT EMPLOYEEID FROM EMPLOYEES) OR 
		@CODE NOT IN (SELECT CODE FROM DEPARTMENTS))
		BEGIN
			RAISERROR('PROBLEM', 16, 1);
			ROLLBACK TRANSACTION P1;
		END
	ELSE

		BEGIN
		INSERT INTO EMPLOYEES VALUES(@EMPLOYEEID, @FIRSTNAME,
		@LASTNAME, @CODE, @SALARY);
		END
	COMMIT TRANSACTION T1;
GO

ELSE BEGIN

	DECLARE C_DELETE CURSOR FOR SELECT EMPLOYEEID, FIRSTNAME, LASTNAME, SALARY, CODE FROM DELETED;
	OPEN CURSOR C_DELETE;
	F


DROP TRIGGER T_INSERT;

INSERT INTO ALEX
VALUES(1, 'AYUSH', 'JAIN', 100, 'LAND');

SELECT * FROM EMPLOYEES


--4
CREATE TRIGGER T_DELETE
ON ALEX
INSTEAD OF DELETE AS
	BEGIN TRANSACTION TEMP;
	SAVE TRANSACTION T_CHECK;
DECLARE
	@EMPLOYEEID NUMERIC(9),
	@FIRSTNAME VARCHAR(10),
	@LASTNAME VARCHAR(10),
	@SALARY NUMERIC(9),
	@CODE CHAR(5)

	SELECT @EMPLOYEEID = EMPLOYEEID FROM DELETED
	SELECT @FIRSTNAME = FIRSTNAME FROM DELETED
	SELECT @LASTNAME = LASTNAME FROM DELETED
	SELECT @SALARY = SALARY FROM DELETED

	IF
	@EMPLOYEEID IN (SELECT MANAGERID FROM DEPARTMENTS)
	BEGIN
		ROLLBACK TRANSACTION T_CHECK;
	END
	 
	ELSE
	BEGIN
		DELETE FROM WORKSON
		WHERE EMPLOYEEID = @EMPLOYEEID;

		DELETE FROM EMPLOYEES
		WHERE EMPLOYEEID = @EMPLOYEEID;
	END

SELECT * FROM DEPARTMENTS
SELECT * FROM EMPLOYEES

DROP TRIGGER T_DELETE
SELECT * FROM ALEX


DELETE FROM ALEX 
WHERE EMPLOYEEID = 5


--4


CREATE VIEW ALEX AS 
SELECT EMPLOYEEID, FIRSTNAME, LASTNAME, SALARY, CODE
FROM EMPLOYEES INNER JOIN DEPARTMENTS
ON EMPLOYEES.DEPTCODE = DEPARTMENTS.CODE;

DROP VIEW ALEX

DROP TRIGGER T_DELETE

CREATE TRIGGER AYUSH_DELETE
ON ALEX
INSTEAD OF DELETE AS

	BEGIN TRANSACTION TEMP;
	SAVE TRANSACTION T1;

	DECLARE
	@EMPLOYEEID NUMERIC(9),
	@NUM_DELETED NUMERIC(10),
	@NUM_MANAGERS NUMERIC(10)

	SELECT @NUM_DELETED = COUNT(*) FROM (SELECT MANAGERID FROM DEPARTMENTS EXCEPT SELECT EMPLOYEEID FROM DELETED) D1;
	SELECT @NUM_MANAGERS = COUNT(*) FROM (SELECT MANAGERID FROM DEPARTMENTS) D2;

	IF(@NUM_MANAGERS > @NUM_DELETED)
	BEGIN
		RAISERROR('TRYING TO DELETE SOME MANAGER', 16, 1);
		ROLLBACK TRANSACTION T1;
	END

	ELSE

	BEGIN
		DECLARE DELETE_CURSOR CURSOR FOR SELECT EMPLOYEEID FROM DELETED;

		OPEN DELETE_CURSOR;

		FETCH NEXT FROM DELETE_CURSOR
		INTO @EMPLOYEEID;
	
		WHILE @@FETCH_STATUS = 0
		BEGIN 
			DELETE FROM WORKSON
			WHERE EMPLOYEEID = @EMPLOYEEID;

			DELETE FROM EMPLOYEES
			WHERE EMPLOYEEID = @EMPLOYEEID;

			FETCH NEXT FROM DELETE_CURSOR
			INTO @EMPLOYEEID;

		END



	END

	GO

DELETE FROM ALEX
WHERE EMPLOYEEID = 4;

SELECT * FROM ALEX

--5

CREATE TRIGGER AYUSH_INSERT
ON EMPLOYEES
AFTER UPDATE, INSERT
AS
	
	DECLARE
	@FIRSTNAME VARCHAR(20),
	@LASTNAME VARCHAR(20),
	@EMPLOYEEID NUMERIC(9)
	DECLARE I_CURSOR CURSOR FOR SELECT EMPLOYEEID, FIRSTNAME, LASTNAME FROM EMPLOYEES

	OPEN I_CURSOR;

	FETCH NEXT FROM I_CURSOR INTO @EMPLOYEEID, @FIRSTNAME, @LASTNAME;

	WHILE @@FETCH_STATUS = 0
	BEGIN
		UPDATE EMPLOYEES
		SET FIRSTNAME = UPPER(@FIRSTNAME),
		LASTNAME = UPPER(@LASTNAME)
		WHERE EMPLOYEEID = @EMPLOYEEID

		FETCH NEXT FROM I_CURSOR INTO @EMPLOYEEID, @FIRSTNAME, @LASTNAME;
	END

SELECT * FROM EMPLOYEES

DROP TRIGGER AYUSH_DELETE
INSERT INTO EMPLOYEES
VALUES(7, 'AYUSH', 'JAIN', 'ADMIN', 100000);


--5

CREATE TRIGGER AYUSH_MODIFY
ON ALEX
INSTEAD OF UPDATE
AS
	BEGIN TRANSACTION T1;
	SAVE TRANSACTION POINT_1;
DECLARE @EMPLOYEEID NUMERIC(10),
		@FIRSTNAME VARCHAR(10),
		@LASTNAME VARCHAR(10),
		@CODE VARCHAR(10),
		@SALARY NUMERIC(10),
		
		--CHECK IF THROUGH UPDATE WE ARE NOT TRYING TO DUPLICATE EMPLOYEEID

		@INT1 NUMERIC(10)

		SELECT @INT1 = COUNT(*) FROM (SELECT DISTINCT EMPLOYEEID FROM INSERTED 
			INTERSECT SELECT DISTINCT EMPLOYEEID FROM EMPLOYEES EXCEPT SELECT DISTINCT EMPLOYEEID FROM DELETED) D1;

			IF @INT1 > 0
			BEGIN
			RAISERROR('PRIMARY KEY VIOLATED', 16, 1);
			ROLLBACK TRANSACTION POINT_1;
			END

			DECLARE @INT2 NUMERIC(10),
			@INT3 NUMERIC(10),
			@INT4 NUMERIC(10);

			SELECT @INT2 = COUNT(*) FROM (SELECT DISTINCT MANAGERID FROM DEPARTMENTS) D2;
			SELECT @INT3 = COUNT(*) FROM (SELECT DISTINCT MANAGERID FROM DEPARTMENTS 
				EXCEPT SELECT DISTINCT EMPLOYEEID FROM DELEETD) D3;

			IF @INT2 > @INT3
			BEGIN
			RAISERROR('NO MANAGER', 16, 1);
			ROLLBACK TRANSACTION POINT_1;
			END

			SELECT @INT4 = COUNT(*) FROM (SELECT DISTINCT CODE FROM INSERTED 
				EXCEPT SELECT DISTINCT CODE FROM DEPARTMENTS) D4;

			IF @INT4 > 0
			BEGIN
			RAISERROR('CANNOT CREATE NEW DEAPARTMENT', 16, 1);
			ROLLBACK TRANSACTION POINT_1;
			END

			--HANDLE THE DELETED TABLES

			DECLARE C_DELETE CURSOR FOR SELECT EMPLOYEEID FROM DELETED;

			OPEN C_DELETE;

			FETCH NEXT FROM C_DELETE INTO @EMPLOYEEID
			
			WHILE @@FETCH_STATUS = 0
			BEGIN
			DELETE 
			FROM WORKSON
			WHERE EMPLOYEEID = @EMPLOYEEID;

			DELETE 
			FROM EMPLOYEES
			WHERE EMPLOYEEID = @EMPLOYEEID;

			FETCH NEXT FROM C_DELETE INTO @EMPLOYEEID;
			END

			CLOSE C_DELETE

			-- HANDLE THE INSERTED TABLE
			
			DECLARE C_INSERT CURSOR FOR SELECT EMPLOYEEID, FIRSTNAME, LASTNAME, CODE, SALARY FROM INSERTED

			OPEN C_INSERT

			FETCH NEXT FROM C_INSERT INTO @EMPLOYEEID, @FIRSTNAME, @LASTNAME, @CODE, @SALARY;

			WHILE @@FETCH_STATUS = 0
			BEGIN
			INSERT INTO EMPLOYEES
			VALUES(@EMPLOYEEID, @FIRSTNAME, @LASTNAME, @CODE, @SALARY)

			FETCH NEXT FROM C_INSERT INTO @EMPLOYEEID, @FIRSTNAME, @LASTNAME, @CODE, @SALARY;

			END

			CLOSE C_INSERT;



--3

CREATE TRIGGER FINAL_INSERT ON ALEX
INSTEAD OF INSERT
AS



	
	










